---
parent: 'common/test_cases/origin_built_release.yml'
extensions:
  sync_repos:
    - name: "image-registry"
  actions:
    - type: "script"
      title: "install the openshift-ansible release"
      repository: "openshift-ansible"
      timeout: 3600
      script: |-
        last_tag="$( git describe --tags --abbrev=0 --exact-match HEAD )"
        last_commit="$( git log -n 1 --pretty=%h )"
        sudo yum install -y "atomic-openshift-utils${last_tag/openshift-ansible/}.git.0.${last_commit}.el7"
        rpm -V "atomic-openshift-utils${last_tag/openshift-ansible/}.git.0.${last_commit}.el7"
    - type: "script"
      title: "install Ansible plugins"
      timeout: 600
      repository: "origin"
      script: |-
        sudo chmod o+rw /etc/environment
        echo "ANSIBLE_JUNIT_DIR=$( pwd )/_output/scripts/ansible_junit" >> /etc/environment
        sudo mkdir -p /usr/share/ansible/plugins/callback
        for plugin in 'default_with_output_lists' 'generate_junit'; do
           wget "https://raw.githubusercontent.com/openshift/origin-ci-tool/master/oct/ansible/oct/callback_plugins/${plugin}.py"
           sudo mv "${plugin}.py" /usr/share/ansible/plugins/callback
        done
        sudo sed -r -i -e 's/^#?stdout_callback.*/stdout_callback = default_with_output_lists/' -e 's/^#?callback_whitelist.*/callback_whitelist = generate_junit/' /etc/ansible/ansible.cfg
    - type: "script"
      title: "determine the release commit for origin images and version for rpms"
      timeout: 600
      repository: "origin"
      script: |-
        jobs_repo="/data/src/github.com/openshift/aos-cd-jobs/"
        git log -1 --pretty=%h > "${jobs_repo}/ORIGIN_COMMIT"
        ( source hack/lib/init.sh; os::build::rpm::get_nvra_vars; echo "-${OS_RPM_VERSION}-${OS_RPM_RELEASE}" ) > "${jobs_repo}/ORIGIN_PKG_VERSION"
    - type: "script"
      title: "build the image registry container image"
      repository: "image-registry"
      timeout: 3600
      script: |-
        if [[ "${PULL_BASE_REF}" == "master" || "${PULL_BASE_REF}" == "release-3.7" || "${PULL_BASE_REF}" == "release-3.8" ]]; then
          make build-images
          docker tag openshift/origin-docker-registry:latest "openshift/origin-docker-registry:$( cat /data/src/github.com/openshift/aos-cd-jobs/ORIGIN_COMMIT )"
        fi
    - type: "script"
      title: "origin prerequisites"
      repository: "aos-cd-jobs"
      script: |-
        ansible-playbook -vv --become               \
                         --become-user root         \
                         --connection local         \
                         --inventory sjb/inventory/ \
                         -e containerized=true      \
                         -e deployment_type=origin  \
                         /usr/share/ansible/openshift-ansible/playbooks/prerequisites.yml
    - type: "script"
      title: "install origin"
      timeout: 7200
      repository: "aos-cd-jobs"
      script: |-
        playbook_base='/usr/share/ansible/openshift-ansible/playbooks/'
        if [[ -s "${playbook_base}/openshift-node/network_manager.yml" ]]; then
            playbook="${playbook_base}openshift-node/network_manager.yml"
        else
            playbook="${playbook_base}byo/openshift-node/network_manager.yml"
        fi
        local_ip="$( curl http://169.254.169.254/latest/meta-data/local-ipv4 )"
        ansible-playbook -vv --become               \
                         --become-user root         \
                         --connection local         \
                         --inventory sjb/inventory/ \
                         -e deployment_type=origin  \
                         ${playbook}
        if [[ -s "${playbook_base}deploy_cluster.yml" ]]; then
            playbook="${playbook_base}deploy_cluster.yml"
        else
            playbook="${playbook_base}byo/config.yml"
        fi
        ansible-playbook -vv --become               \
                         --become-user root         \
                         --connection local         \
                         --inventory sjb/inventory/ \
                         -e deployment_type=origin  \
                         -e etcd_data_dir="${ETCD_DATA_DIR}" \
                         -e openshift_master_default_subdomain="${local_ip}.nip.io"             \
                         -e openshift_pkg_version="$( cat ./ORIGIN_PKG_VERSION )"               \
                         -e oreg_url='openshift/origin-${component}:'"$( cat ./ORIGIN_COMMIT )" \
                         ${playbook}
    - type: "script"
      title: "expose the kubeconfig"
      timeout: 600
      script: |-
        sudo chmod a+x /etc/ /etc/origin/ /etc/origin/master/
        sudo chmod a+rw /etc/origin/master/admin.kubeconfig
    - type: "script"
      title: "ensure built version of origin is installed"
      timeout: 600
      repository: "origin"
      script: |-
        origin_package="$( source hack/lib/init.sh; os::build::rpm::format_nvra )"
        rpm -V "${origin_package}"
    - type: "script"
      title: "run extended tests"
      repository: "origin"
      script: |-
        OS_BUILD_ENV_PULL_IMAGE=true OS_BUILD_ENV_PRESERVE=_output/local/bin/linux/amd64/extended.test hack/env make build-extended-test
        OPENSHIFT_SKIP_BUILD='true' KUBECONFIG=/etc/origin/master/admin.kubeconfig TEST_ONLY=true JUNIT_REPORT='true' make test-extended SUITE=core FOCUS="\[registry\]"
  system_journals:
    - origin-master.service
    - origin-master-api.service
    - origin-master-controllers.service
    - origin-node.service
    - openvswitch.service
    - ovs-vswitchd.service
    - ovsdb-server.service
    - etcd.service
    - systemd-journald.service
